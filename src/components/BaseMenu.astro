---
const { top, bottom, left, right, id } = Astro.props;

const position = `top: ${top}; bottom: ${bottom}; left: ${left}; right: ${right}`;
---

<base-menu class="relative inline-block text-left bg--primary">
  <div class="activator">
    <slot name="activator" />
  </div>

  <div
    id="menu-content"
    class="absolute mt-2 rounded-md shadow-lg bg-white menu"
    role="menu"
    style={position}
  >
    <slot />
  </div>
</base-menu>

<script>
  class BaseMenu extends HTMLElement {
    isDropdownActive = false;
    activator = null;
    menuContent = null;

    constructor() {
      super();
      this.isDropdownActive = false;

      this.activator = this.querySelector("div.activator");
      this.menuContent = this.querySelector("div.menu");

      this.activator.addEventListener("click", (event) => {
        event.stopPropagation();
        this.toggleDropdown();
      });

      document.addEventListener("click", (event) => {
        if (
          this.activator.contains(event.target) ||
          this.menuContent.contains(event.target)
        ) {
          return;
        }
        this.hideDropdown();
      });
    }

    toggleDropdown() {
      this.isDropdownActive = !this.isDropdownActive;
      this.isDropdownActive
        ? this.menuContent.classList.add("show")
        : this.menuContent.classList.remove("show");
    }

    hideDropdown() {
      this.isDropdownActive = false;

      this.menuContent.classList.remove("show");
    }
  }

  customElements.define("base-menu", BaseMenu);
</script>

<style lang="scss" scoped>
  .menu {
    transition: opacity 0.3s linear;
    visibility: hidden;
    transition:
      visibility 0s 0.1s,
      opacity 0.1s linear;
    opacity: 0;
  }
  .show {
    visibility: visible;
    opacity: 1;
    transition: opacity 0.1s linear;
  }
</style>
